1.
SELECT e.employee_id,e.job_title,e.address_id,a.address_text
FROM employees AS e
JOIN addresses AS a ON e.address_id=a.address_id
ORDER BY  e.address_id
LIMIT 5

2.
SELECT e.first_name,e.last_name,t.name,a.address_text
FROM employees as e
JOIN addresses as a ON e.address_id=a.address_id
JOIN towns AS t ON t.town_id=a.town_id
ORDER BY e.first_name,e.last_name
LIMIT 5;

3.
SELECT e.employee_id,e.first_name,e.last_name,d.name
FROM employees AS e
JOIN departments AS d ON e.department_id=d.department_id
WHERE d.name='Sales'
ORDER BY e.employee_id desc

4.
SELECT e.employee_id,e.first_name,e.salary,d.name
FROM employees AS e
JOIN departments AS d ON e.department_id=d.department_id
WHERE e.salary > 15000
ORDER BY e.department_id desc
limit 5

5.
SELECT e.employee_id,e.first_name
FROM employees as e 
WHERE e.employee_id NOT IN (SELECT ep.employee_id from employees_projects AS ep)
ORDER BY e.employee_id desc
LIMIT 3

6.
SELECT e.first_name,e.last_name,e.hire_date,d.name
FROM employees AS e
JOIN departments AS d ON e.department_id=d.department_id
WHERE DATE(e.hire_date) > '1999-01-01' AND d.name IN ( 'Sales','Finance')
ORDER BY e.hire_date

7.
SELECT e.employee_id,e.first_name,p.name
FROM employees AS e
JOIN employees_projects AS ep ON e.employee_id=ep.employee_id
JOIN projects AS p ON p.project_id=ep.project_id
WHERE DATE(p.start_date) > '2002-08-13' AND p.end_date IS NULL
ORDER BY e.first_name,p.name
LIMIT 5

8.
SELECT e.employee_id,e.first_name,
CASE 
WHEN YEAR(p.start_date) >=2005 THEN null
ELSE  p.name
END AS project_name
FROM employees AS e
JOIN employees_projects AS ep ON e.employee_id=ep.employee_id
JOIN projects AS p ON p.project_id=ep.project_id
WHERE e.employee_id=24 
ORDER BY p.name

9.
SELECT e.employee_id,e.first_name,e.manager_id,em.first_name
FROM employees AS e
left join employees AS em ON e.manager_id=em.employee_id
WHERE  e.manager_id IN (3,7)
ORDER BY e.first_name;

10.
SELECT e.employee_id,CONCAT(e.first_name,' ',e.last_name) as employee_name,CONCAT(em.first_name,' ',em.last_name) as manager_name,d.name
FROM employees AS e
left JOIN employees AS em ON e.manager_id=em.employee_id
left JOIN departments AS d ON d.department_id=e.department_id
WHERE e.manager_id iS NOT NULL 
ORDER BY e.employee_id
limit 5


11.
SELECT MIN(k.avgs)
FROM
(SELECT AVG(salary) as avgs
from employees 
GROUP BY department_id) AS k;

12.
SELECT c.country_code,m.mountain_range,p.peak_name,p.elevation
FROM countries AS c
JOIN mountains_countries AS mc ON mc.country_code=c.country_code
JOIN mountains AS m ON m.id=mc.mountain_id
JOIN peaks AS p ON p.mountain_id=m.id
WHERE p.elevation > 2835 AND c.country_code='BG'
ORDER BY p.elevation DESC

13.
SELECT c.country_code,COUNT(m.mountain_range) as mountain_range
FROM countries AS c
JOIN mountains_countries AS mc ON mc.country_code=c.country_code
JOIN mountains AS m ON m.id=mc.mountain_id
WHERE c.country_code IN ('US','RU','BG')
GROUP BY c.country_code
ORDER BY mountain_range desc

14.
SELECT c.country_name,r.river_name
FROM countries AS c
LEFT JOIN countries_rivers AS cr ON cr.country_code=c.country_code
LEFT JOIN rivers AS r ON r.id=cr.river_id
WHERE c.continent_code='AF'
ORDER BY c.country_name
LIMIT 5

15.
select c.continent_code,
       c.currency_code,
       count(*) as 'currency_usage'
from countries as c
group by c.continent_code, c.currency_code
having currency_usage > 1
   and currency_usage = (select count(*) as cn
                         from countries as c

16.
SELECT count(*) as country_count
FROM countries AS c
left JOIN mountains_countries AS mc ON mc.country_code=c.country_code
WHERE mc.country_code is null
