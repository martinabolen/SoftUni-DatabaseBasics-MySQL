1.
CREATE TABLE users
(
id INT NOT NULL PRIMARY KEY,
username VARCHAR(30) NOT NULL UNIQUE,
password VARCHAR(30) NOT NULL,
email VARCHAR(50)
);

CREATE TABLE categories
(
id INT NOT NULL PRIMARY KEY,
name VARCHAR(50) NOT NULL,
parent_id INT,
CONSTRAINT fk_categories_categories FOREIGN KEY(parent_id) REFERENCES categories(id)
);

CREATE TABLE contests
(
id INT NOT NULL PRIMARY KEY,
name VARCHAR(50) NOT NULL,
category_id INT,
CONSTRAINT fk_contests_categories FOREIGN KEY(category_id) REFERENCES categories(id)
);

CREATE TABLE problems
(
id INT NOT NULL PRIMARY KEY,
name VARCHAR(100) NOT NULL,
points INT NOT NULL,
tests INT DEFAULT 0,
contest_id INT,
CONSTRAINT fk_problems_contests FOREIGN KEY(contest_id) REFERENCES contests(id)
);
 


CREATE TABLE submissions
(
id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
passed_tests INT NOT NULL,
problem_id INT,
user_id INT,
CONSTRAINT fk_submissions_problems FOREIGN KEY(problem_id) REFERENCES problems(id),
CONSTRAINT fk_submissions_users FOREIGN KEY(user_id) REFERENCES users(id)
);


CREATE TABLE users_contests
(
user_id INT,
contest_id INT,
CONSTRAINT pk_users_contests PRIMARY KEY(user_id,contest_id),
CONSTRAINT fk_uc_users FOREIGN KEY(user_id) REFERENCES users(id),
CONSTRAINT fk_uc_contests FOREIGN KEY(contest_id) REFERENCES contests(id)
);

2.
INSERT INTO submissions(passed_tests,problem_id,user_id)
SELECT
CEIL(sqrt((POWER(CHAR_LENGTH(name),3)))-CHAR_LENGTH(name)),
id,
CEIL(id*3/2)
FROM problems
WHERE id BETWEEN 1 AND 10;


3.
UPDATE problems p
JOIN contests as co ON  co.id=p.contest_id
JOIN categories as ca ON ca.id=co.category_id
SET p.tests=
CASE 
WHEN p.id%3=0 THEN CHAR_LENGTH(ca.name)
WHEN p.id%3=1 THEN (SELECT SUM(s.id) FROM submissions AS s WHERE s.problem_id=p.id GROUP BY s.problem_id)
WHEN p.id%3=2 THEN CHAR_LENGTH(co.name)
END 
WHERE p.tests=0;

4.
DELETE u FROM users as u
LEFT JOIN  users_contests AS uc ON uc.user_id = u.id 
WHERE uc.user_id IS NULL;


5.
SELECT id,username,email
FROM users
ORDER BY id

6.
SELECT id,name
FROM categories
WHERE parent_id IS NULL
ORDER BY id 

7.
SELECT id,name,tests
FROM problems
WHERE tests > points AND name LIKE  CONCAT('%',' ','%')
ORDER BY id desc

8.
SELECT p.id,CONCAT(ca.name,' - ',c.name,' - ',p.name) as full_path
FROM problems AS p
JOIN contests AS c ON p.contest_id=c.id
JOIN categories AS ca ON ca.id=c.category_id
order by p.id

9.
SELECT c.id,c.name
FROM categories AS c
LEFT JOIN categories as ca ON c.id=ca.parent_id
WHERE ca.parent_id IS NULL
ORDER BY c.name,c.id

10.
SELECT u.id,u.username,u.password
FROM users AS u
WHERE password IN(SELECT ui.password FROM users AS ui WHERE ui.username<>u.username)
ORDER BY u.username,u.id

11.
SELECT k.id,k.name,k.contestants
from
(SELECT c.id,c.name,COUNT(uc.user_id) AS contestants
FROM contests AS c
left JOIN users_contests AS uc ON uc.contest_id=c.id
GROUP BY c.id,c.name
ORDER BY contestants desc
limit 5) as k
order by k.contestants,k.id

12.
SELECT DISTINCT s.id,u.username,p.name,CONCAT(s.passed_tests,' / ', p.tests)
FROM submissions AS s
LEFT JOIN users AS u ON s.user_id=u.id
LEFT JOIN problems AS p ON p.id=s.problem_id
LEFT JOIN users_contests AS uc ON uc.user_id=u.id
WHERE s.user_id=(SELECT k.user_id FROM
(SELECT COUNT(uc.user_id),uc.user_id
from users_contests AS uc
GROUP BY uc.user_id
ORDER BY COUNT(uc.user_id) desc
LIMIT 1) AS k)
ORDER BY s.id desc

13.
SELECT c.id,c.name,SUM(p.points) AS maximum_points
FROM contests AS c
JOIN problems AS p ON c.id=p.contest_id
GROUP BY c.id
ORDER BY maximum_points desc,c.id;

14.
SELECT c.id,c.name,COUNT(s.id) as submissions
FROM submissions as s 
JOIN problems AS p ON s.problem_id=p.id
JOIN contests AS c ON p.contest_id=c.id
where s.user_id IN(select uc.user_id from users_contests as uc where uc.contest_id=c.id)
GROUP BY c.id,c.name
order by COUNT(s.id) desc,c.id

15.
CREATE PROCEDURE udp_login (username VARCHAR(30),password VARCHAR(30))
BEGIN
START TRANSACTION;
IF username NOT IN(SELECT username FROM users)
THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Username does not exist!';
ROLLBACK;
ELSEIF password NOT IN(SELECT password FROM users AS u WHERE u.username=username)
THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Password is incorrect!';
ROLLBACK;
ELSEIF username IN (SELECT username FROM logged_in_users )
THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User is already logged in!';
ROLLBACK;
else
INSERT INTO logged_in_users(id,username,password,email)
VALUES
(
(SELECT id FROM users AS u  WHERE u.username=username),
username,
password,
(SELECT email FROM users AS u  WHERE u.username=username)
);
END IF;
END 

16.
CREATE PROCEDURE udp_evaluate(submissions_id INT)
BEGIN
START TRANSACTION;
IF submissions_id NOT IN(SELECT id FROM submissions)
THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Submission does not exist!';
ROLLBACK;
ELSE
INSERT INTO evaluated_submissions(id,problem,user,result)
SELECT 
submissions_id,
p.name,
u.username,
CEIL(p.points/p.tests*s.passed_tests)
FROM problems AS p
JOIN submissions AS s ON s.problem_id=p.id
JOIN users AS u ON u.id=s.user_id
WHERE s.id=submissions_id; 
END IF;
END;
