1.
CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT first_name,last_name
FROM employees
WHERE salary > 35000
ORDER by first_name,last_name,employee_id;
END

2.
CREATE PROCEDURE usp_get_employees_salary_above(number INT)
BEGIN
SELECT first_name,last_name
FROM employees
WHERE salary >= number
ORDER by first_name,last_name,employee_id;
END

3.
CREATE PROCEDURE usp_get_towns_starting_with(strings VARCHAR(10))
BEGIN
SELECT name
FROM towns
WHERE name LIKE CONCAT(strings,'%')
ORDER BY name;
END

4.
CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(20))
BEGIN
SELECT e.first_name,e.last_name
FROM employees AS e
JOIN addresses AS a ON a.address_id=e.address_id
JOIN towns AS t ON a.town_id=t.town_id
WHERE t.name=town_name
ORDER BY e.first_name,e.last_name,e.employee_id;
END

5.
CREATE FUNCTION ufn_get_salary_level(emp_salary DECIMAL(19,4))
RETURNS VARCHAR(20)
BEGIN
DECLARE result VARCHAR(20);
IF emp_salary < 30000 THEN SET result:='Low';
ELSEIF emp_salary BETWEEN 30000 AND 50000 THEN SET result:='Average';
ELSEIF emp_salary > 50000 THEN SET result:='High';
END IF;
RETURN result;
END

6.
CREATE FUNCTION ufn_get_salary_level(emp_salary DECIMAL(19,4))
RETURNS VARCHAR(20)
BEGIN
DECLARE result VARCHAR(20);
IF emp_salary < 30000 THEN SET result:='Low';
ELSEIF emp_salary BETWEEN 30000 AND 50000 THEN SET result:='Average';
ELSEIF emp_salary > 50000 THEN SET result:='High';
END IF;
RETURN result;
END;


CREATE PROCEDURE usp_get_employees_by_salary_level(level_of_salary VARCHAR(20))
BEGIN
SELECT first_name,last_name
FROM employees 
WHERE ufn_get_salary_level(salary)=level_of_salary
ORDER BY first_name desc,last_name desc;
END;

7.
CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS BIT
BEGIN
RETURN word REGEXP CONCAT('^[',set_of_letters,']+$');
END

8.
CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
SELECT CONCAT(first_name,' ',last_name) as full_name
FROM account_holders
ORDER BY full_name,id;
END

9.
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(number_balance DECIMAL(19,4))
BEGIN
SELECT k.first_name,k.last_name 
from
(SELECT ah.first_name,ah.last_name,SUM(a.balance) as sums,a.id
FROM accounts AS a
JOIN account_holders as ah ON ah.id=a.account_holder_id
GROUP BY ah.first_name,ah.last_name) as k
WHERE k.sums > number_balance
ORDER BY k.id;
END

10.
CREATE FUNCTION ufn_calculate_future_value(initial_sum DECIMAL(19,4), yearly_interest_rate DECIMAL(19,4),number_of_years INT)
RETURNS DOUBLE
BEGIN
RETURN initial_sum*(POWER((1+yearly_interest_rate),number_of_years));
END

11.
CREATE FUNCTION ufn_calculate_future_value(initial_sum DECIMAL(19,4), yearly_interest_rate DECIMAL(19,4),number_of_years INT)
RETURNS DOUBLE
BEGIN
RETURN initial_sum*(POWER((1+yearly_interest_rate),number_of_years));
END

12.
CREATE PROCEDURE usp_deposit_money(account_id INT, money_amount DECIMAL(19,4)) 
BEGIN
START TRANSACTION;
IF(money_amount < 0) THEN
ROLLBACK;
ELSE
UPDATE accounts
SET balance=balance+money_amount
where id=account_id;
END IF;
END

13.
CREATE PROCEDURE usp_withdraw_money(account_id INT, money_amount DECIMAL(19,4)) 
BEGIN
START TRANSACTION;
IF ((SELECT balance FROM accounts WHERE id=account_id)<=money_amount)THEN 
ROLLBACK;
ELSEIF(money_amount<=0) THEN
ROLLBACK;
ELSE
UPDATE accounts
SET balance=balance-money_amount
where id=account_id;
END IF;
END 

14.
CREATE PROCEDURE usp_transfer_money(from_account_id INT, to_account_id INT, amount DECIMAL(19,4))
BEGIN
START TRANSACTION;
IF from_account_id NOT IN(SELECT id FROM accounts) THEN
ROLLBACK;
ELSEIF to_account_id NOT IN (SELECT id FROM accounts) THEN
ROLLBACK;
ELSEIF from_account_id=to_account_id THEN
ROLLBACK;
ELSEIF amount<=0 THEN
ROLLBACK;
ELSEIF (SELECT balance FROM accounts WHERE from_account_id=id) < amount THEN 
ROLLBACK;
ELSE 

UPDATE accounts
SET balance=balance-amount
where id=from_account_id;

UPDATE accounts
SET balance=balance+amount
where id=to_account_id;

END IF;
COMMIT;
END

15.
CREATE TABLE logs
(
log_id INT PRIMARY KEY auto_increment, 
account_id INT, 
old_sum DECIMAL(19,4), 
new_sum DECIMAL(19,4)
);


16.
CREATE TABLE `logs`
(
    log_id int not null auto_increment PRIMARY KEY,
    account_id int not null,
    old_sum decimal(15,4) not null,
    new_sum decimal(15,4) not null,
    constraint fk_logs_accounts
    foreign key (account_id)
    references accounts(id)
);
 
CREATE TRIGGER tr_update_accounts
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
    INSERT INTO logs(account_id,old_sum,new_sum) values (old.id,old.balance,new.balance);
END;
 
CREATE TABLE notification_emails
(
    `id` int not null auto_increment PRIMARY KEY,
    `recipient` int,
    `subject` varchar(50),
    `body` text
);
 
CREATE TRIGGER tr_logs_inserted_emails
AFTER INSERT
ON `logs`
FOR EACH ROW
BEGIN
    INSERT INTO notification_emails (recipient,subject,body)
    values (new.account_id,concat('Balance change for account: ',new.account_id),concat('On ',date(curdate()),'your balance was changed from', new.old_sum, ' to ',new.new_sum));
END
