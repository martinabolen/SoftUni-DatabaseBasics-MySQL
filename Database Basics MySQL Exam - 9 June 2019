1.
CREATE TABLE branches
(id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(30) NOT NULL UNIQUE
);

CREATE TABLE employees
(id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
salary DECIMAL(10,2) NOT NULL,
started_on DATE NOT NULL,
branch_id INT NOT NULL,
CONSTRAINT fk_employees_branches FOREIGN KEY(branch_id) REFERENCES branches(id)
);

CREATE TABLE clients
(
id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
full_name VARCHAR(50) NOT NULL,
age INT NOT NULL
);

CREATE TABLE employees_clients
(
employee_id INT,
client_id INT,
CONSTRAINT pk_employees_clients PRIMARY KEY(employee_id,client_id),
CONSTRAINT fk_emp_cl_emp FOREIGN KEY(employee_id) REFERENCES employees(id),
CONSTRAINT fk_emp_cl_cl FOREIGN KEY(client_id) REFERENCES clients(id)
);

CREATE TABLE bank_accounts
(
id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
account_number VARCHAR(10) NOT NULL,
balance DECIMAL(10,2) NOT NULL,
client_id INT NOT NULL UNIQUE,
CONSTRAINT fk_b_acc_clients FOREIGN KEY(client_id) REFERENCES clients(id)
);
 
 CREATE TABLE cards
 (
 id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
 card_number VARCHAR(19) NOT NULL,
 card_status VARCHAR(7) NOT NULL,
 bank_account_id INT NOT NULL,
 CONSTRAINT fk_cards_b_acc FOREIGN KEY(bank_account_id) REFERENCES bank_accounts(id)
 ); 
 
 
2.
INSERT INTO cards(card_number,card_status,bank_account_id)
SELECT 
REVERSE(full_name),
'Active' ,
id
FROM clients
WHERE clients.id BETWEEN 191 AND 200

3.
UPDATE employees_clients
SET employee_id=(SELECT k.employee_id FROM
(SELECT DISTINCT employee_id,COUNT(client_id) 
FROM employees_clients
GROUP BY employee_id
ORDER BY COUNT(client_id),employee_id
LIMIT 1) AS k)
WHERE client_id=employee_id;

4.
DELETE FROM employees 
WHERE id NOT IN (SELECT ec.employee_id FROM employees_clients AS ec)

5.
SELECT id,full_name FROM clients
ORDER BY id

6.
SELECT id,CONCAT(first_name,' ',last_name) AS full_name,CONCAT('$',salary) AS salary,started_on
FROM employees 
WHERE salary >=100000 AND started_on >='2018-01-01'
ORDER BY salary desc , id


7.
SELECT c.id,CONCAT(c.card_number,' : ',cl.full_name) AS card_token
FROM cards AS c
JOIN bank_accounts AS b ON b.id=c.bank_account_id
JOIN clients AS cl ON cl.id=b.client_id
ORDER BY c.id desc

8.
SELECT CONCAT(e.first_name,' ',e.last_name) AS name,e.started_on,COUNT(ec.client_id) AS count_of_clients
FROM employees AS e 
LEFT JOIN employees_clients as EC on e.id=ec.employee_id
GROUP BY name
ORDER BY count_of_clients desc,ec.employee_id
LIMIT 5

9.
SELECT b.name,COUNT(ca.id) AS count_of_cards
FROM branches AS b
LEFT JOIN employees AS e ON e.branch_id=b.id
LEFT JOIN employees_clients AS ec ON ec.employee_id=e.id
LEFT JOIN clients AS c ON c.id=ec.client_id
LEFT JOIN bank_accounts AS ba ON ba.client_id=c.id
LEFT JOIN cards AS ca ON ca.bank_account_id=ba.id
GROUP BY b.name
ORDER BY count_of_cards desc,b.name


10.
CREATE FUNCTION udf_client_cards_count(name VARCHAR(30)) 
RETURNS INT 
BEGIN
DECLARE cards INT;
SET cards:=(
SELECT COUNT(c.id) AS cards
FROM cards AS c 
LEFT JOIN bank_accounts AS b ON b.id=c.bank_account_id
LEFT JOIN clients AS cl ON cl.id=b.client_id
WHERE cl.full_name=name
group by cl.full_name);
RETURN cards;
END

11.
CREATE PROCEDURE udp_clientinfo(full_name VARCHAR(30)) 
BEGIN
SELECT c.full_name,c.age,b.account_number,CONCAT('$',balance) AS balance
FROM clients AS c 
JOIN bank_accounts AS b ON b.client_id=c.id
WHERE c.full_name=full_name;
END 
